[{"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/index.js":"1","/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/pages/Contacts/index.js":"2","/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/pages/Contacts/useContacts.js":"3","/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/pages/Contacts/ContactsTable/index.js":"4","/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/reportWebVitals.js":"5","/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/components/CopyToClipboardText/index.js":"6"},{"size":522,"mtime":1606733686711,"results":"7","hashOfConfig":"8"},{"size":1069,"mtime":1606748381051,"results":"9","hashOfConfig":"8"},{"size":897,"mtime":1606739553679,"results":"10","hashOfConfig":"8"},{"size":2083,"mtime":1606746374869,"results":"11","hashOfConfig":"8"},{"size":364,"mtime":1606732963866,"results":"12","hashOfConfig":"8"},{"size":950,"mtime":1606749764573,"results":"13","hashOfConfig":"8"},{"filePath":"14","messages":"15","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},"1hmor",{"filePath":"17","messages":"18","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"16"},{"filePath":"19","messages":"20","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"21","messages":"22","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"23","messages":"24","errorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0},{"filePath":"25","messages":"26","errorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"27"},"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/index.js",[],["28","29"],"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/pages/Contacts/index.js",[],"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/pages/Contacts/useContacts.js",[],"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/pages/Contacts/ContactsTable/index.js",[],"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/reportWebVitals.js",[],"/home/stanislav/Рабочий стол/WorkOut/React/ReactPractice/React-theory/table-users/src/components/CopyToClipboardText/index.js",["30"],"import PropTypes from 'prop-types'\nimport { useCopyToClipboard } from 'react-use'\n\nimport { makeStyles, createStyles } from '@material-ui/core/styles';\nimport FileCopyOutlinedIcon from '@material-ui/icons/FileCopyOutlined';\nimport Tooltip from '@material-ui/core/Tooltip'\nimport { Button } from '@material-ui/core';\n\nconst useStyles = makeStyles((theme) => createStyles({\n\troot: {\n\t\tdisplay: 'flex',\n\t\tcursor: 'pointer',\n\t\talignItems: 'center'\n\t},\n\ticon: {\n\t\tmarginRight: theme.spacing(1)\n\t}\n}))\n\nexport const CopyToClipboardText = ({ text }) => {\n\tconst [state, copyToClipboard] = useCopyToClipboard();\n\tconst classes = useStyles();\n\treturn (\n\t\t<Tooltip title=\"Copy\" placement='top' arrow>\n\t\t\t<Button className={classes.root} onClick={() => copyToClipboard(text)}>\n\t\t\t\t<FileCopyOutlinedIcon fontSize='small' className={classes.icon} />\n\t\t\t\t{text}\n\t\t\t</Button>\n\t\t</Tooltip>\n\t)\n}\n\nCopyToClipboardText.propTypes = {\n\ttext: PropTypes.string.isRequired\n}",{"ruleId":"31","replacedBy":"32"},{"ruleId":"33","replacedBy":"34"},{"ruleId":"35","severity":1,"message":"36","line":21,"column":9,"nodeType":"37","messageId":"38","endLine":21,"endColumn":14},"no-native-reassign",["39"],"no-negated-in-lhs",["40"],"no-unused-vars","'state' is assigned a value but never used.","Identifier","unusedVar","no-global-assign","no-unsafe-negation"]